function Hello() {
	return <div>Hello React!</div>;
	//what browser thinks -- return React.createElement('div', null, 'Hello React!');
}

ReactDOM.render(
  <Hello />, 
  //what browser thinks -- React.createElement(Hello, null),
  document.getElementById('mountNode'),
);


output: Hello React!



////////////////////////////////////////////////////////////////////////////////




function Button() {
	return <button>TEST</button>;
	//what browser thinks -- return React.createElement('div', null, 'Hello React!');
}

ReactDOM.render(
  <Button />, 
  //what browser thinks -- React.createElement(Hello, null),
  document.getElementById('mountNode'),
);


////////////////////////////////////////////////////////////////////////////////


// Challenge: Start the button with 5
// Double the button's label on each click

function logRandom() {
	console.log(Math.random());
}

function Button() {
	//const [currentValue, functionToSetNewStateValue] = useState(initialStateValue) ;
	const [counter, setCounter] = useState(5);
	//return <button>{any expression}</button>
	//return <button>{Math.random()}</button>
	//return <button>{counter}</button>
	//return <button onClick={function reference}>{counter}</button>;
	//return <button onClick={logRandom}>{counter}</button>; //here we did not invoke the function, we just point to the function
	//return <button onClick={() => console.log(Math.random())}>{counter}</button>; 
	return (
		<button onClick={() => setCounter(counter*2)}>
			{counter}
		</button>
	);
}

ReactDOM.render(
  <Button />, 
  document.getElementById('mountNode'),
);



////////////////////////////////////////////////////////////////////////////////


// Challenge: Start the button with 5
// Double the button's label on each click


function Button() {
	//const [currentValue, functionToSetNewStateValue] = useState(initialStateValue) ;
	const [counter, setCounter] = useState(5);
	
	const handleClick = () => setCounter(counter+1);
	
	//return <button>{any expression}</button>
	//return <button>{Math.random()}</button>
	//return <button>{counter}</button>
	//return <button onClick={function reference}>{counter}</button>;
	//return <button onClick={logRandom}>{counter}</button>; //here we did not invoke the function, we just point to the function
	//return <button onClick={() => console.log(Math.random())}>{counter}</button>; 
	return (
		<button onClick={handleClick}>
			{counter}
		</button>
	);
}

ReactDOM.render(
  <Button />, 
  document.getElementById('mountNode'),
);



////////////////////////////////////////////////////////////////////////////////









//function Button() 
function Button(props)
{
	//const [currentValue, functionToSetNewStateValue] = useState(initialStateValue) ;
	//const [counter, setCounter] = useState(5);
	//const handleClick = () => setCounter(counter+1);
	const handleClick = () => props.onClickFunction(props.increment);
	return (
		//<button onClick={handleClick}>
		//<button onClick={() => {}}>
		//<button onClick={props.onClickFunction}>
		//<button onClick={props.onClickFunction{props.increment}}> //it is a invocation for a function not a reference to a function
		//<button onClick={() => props.onClickFunction{props.increment}}>
		<button onClick={handleClick}>
			//{counter}
			//+1
			+{props.increment}
		</button>
	);
}

//Display Component

//functional Display()
functional Display(props)
{
	return(
		//<div>.....</div>
		<div>{props.message}</div>
	);
}


//App Component

functional App(){
	const [counter, setCounter] = useState(5);
	//const incrementCounter = () => setCounter(counter+1);
	const incrementCounter = (incrementValue) => setCounter(counter+incrementValue);
	return(
		<div>
			//<Button />  
			//<Button onClickFunction={incrementCounter} />
			//<Button onClickFunction={incrementCounter} increment={5} />
			<Button onClickFunction={incrementCounter} increment={1} />
			<Button onClickFunction={incrementCounter} increment={5} />
			<Button onClickFunction={incrementCounter} increment={10} />
			<Button onClickFunction={incrementCounter} increment={100} />
			//<Display />
			<Display message={counter} />
		</div>
	);
}
 


ReactDOM.render(
	// [ <Button />, <Display /> ] 
	
	/**
	<div>
		<Button />
		<Display />
	</div>,
	**/
	
	<App />,
	
  document.getElementById('mountNode'),
);






//////////////////////////////////////////////////////////////////////////



const App = ({title}) => (
  <div className="header">{title}</div>
);

ReactDOM.render(
	<App title="The GitHub Cards App" />,
  mountNode,
);


//////////////////////////////////////////////////////////////////////////




//in class components, both the props and state are managed in the instance of the class



/**
const testData = [
		{name: "Dan Abramov", avatar_url: "https://avatars0.githubusercontent.com/u/810438?v=4", company: "@facebook"},
		{name: "Sophie Alpert", avatar_url: "https://avatars2.githubusercontent.com/u/6820?v=4", company: "Humu"},
		{name: "Sebastian MarkbÃ¥ge", avatar_url: "https://avatars2.githubusercontent.com/u/63648?v=4", company: "Facebook"},
];
**/



const CardList = (props) => (
	<div>
		//<Card />
		//<Card {...testData[0]} />
		//<Card {...testData[1]} />
		//{testData.map(profile => <Card {...profile}/>)}//here it depends on global object
		//{props.profiles.map(profile => <Card {...profile}/>)}
		{props.profiles.map(profile => <Card key={profile.id} {...profile}/>)}
	</div>
);


class Card extends React.Component {
	//constructor
	//this
	render(){
		const profile = testData[0];
		return(
			<div className="github-profile">
				//<img src="https://placehold.it/75" />
				<img src={profile.avatar_url} />
				<div className="info">
					<div className="name">
						//Name here...
						{profile.name}
					</div>
					<div className="company">
						//Company here...
						{profile.company}
					</div>
				</div>
			</div>
		);
	}
}


class Form extends React.Component {
	//userNameInput = React.createRef();
	state = { userName: '' };
	//handleSubmit = (event) => {
	handleSubmit = async (event) => {
		event.preventDefault(); 
		//console.log(this.userNameInput.current.value);
		//console.log(this.state.userName);
		const resp = await axios.get(`https://api.github.com/users/${this.state.userName}`);
		//console.log(resp.data);
		this.props.onSubmit(resp.data);
		this.setState({ userName: '' });
	};
	render() {
  	return (
    	//<form action="">
		<form onSubmit={this.handleSubmit}>
			<input 
				type="text" 
				placeholder="GitHub username" 
				//ref={this.userNameInput}
				value={this.state.userName}
				onChange={event => this.setState({ userName: event.target.value })}
				required
			/>
			<button>Add card</button>
    	</form> 
    );
  }
}



class App extends React.Component {
	//constructor
	//this
	/**
	constructor(props){
		super(props);
		this.state = {
			profiles: testData,
		};
	}
	**/
	state = {
		//profiles: testData,
		profiles: [],
	};
	
	addNewProfile = (profileData) => {
		//console.log('App', profileData);
		this.setState(prevState => ({
			profiles: [...prevState.profiles, profileData],
		}));
	};
	
	render(){
		return(
			//<div className="header">{title}</div>;
			<div>
				<div className="header">
					{this.prop.title}
				</div>
				//<Card />
				//<Form />
				//<CardList />
				//<CardList profiles={testData}/>
				<CardList profiles={this.state.profiles} />
				<Form onSubmit={this.addNewProfile} />
			</div>
		);
	}
}


ReactDOM.render(
	<App title="The GitHub Cards App" />,
  mountNode,
);



/////////////////////////////////////////////////////////////////////


// STAR MATCH - V2


const StarsDisplay = props => (
	<>
		{utils.range(1, props.count).map(starId =>
		  <div key={starId} className="star" />
		)}
	</>
);

const PlayNumber = props => (
	/**<button className="number">
		{props.number}
	</button>**/
	<button className="number" onClick={() => console.log('Num', props.number)}>
		{props.number}
	</button>
);



const StarMatch = () => {
	const [stars, setStars] = useState(utils.random(1, 9));
	return (
		<div className="game">
			<div className="help">
				Pick 1 or more numbers that sum to the number of stars
			</div>
			<div className="body">
				<div className="left">
					/**{utils.range(1, stars).map(starId =>
						<div key={starId} className="star" />
					)}**/
					<StarsDisplay count={stars}/>
				</div>
				<div className="right">
					{utils.range(1, 9).map(number =>
						//<button key={number} className="number">{number}</button>
						<PlayNumber key={number} number={number}/>
					)}
				</div>
			</div>
			<div className="timer">Time Remaining: 10</div>
		</div>
	);
};

// Color Theme
const colors = {
  available: 'lightgray',
  used: 'lightgreen',
  wrong: 'lightcoral',
  candidate: 'deepskyblue',
};

// Math science
const utils = {
  // Sum an array
  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),

  // create an array of numbers between min and max (edges included)
  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),

  // pick a random number between min and max (edges included)
  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),

  // Given an array of numbers and a max...
  // Pick a random sum (< max) from the set of all available sums in arr
  randomSumIn: (arr, max) => {
    const sets = [[]];
    const sums = [];
    for (let i = 0; i < arr.length; i++) {
      for (let j = 0, len = sets.length; j < len; j++) {
        const candidateSet = sets[j].concat(arr[i]);
        const candidateSum = utils.sum(candidateSet);
        if (candidateSum <= max) {
          sets.push(candidateSet);
          sums.push(candidateSum);
        }
      }
    }
    return sums[utils.random(0, sums.length - 1)];
  },
};

ReactDOM.render(<StarMatch />, mountNode);
